name: Build Latest

on:
  push:
    tags:
    - '*'
  workflow_dispatch:
    inputs:
      doRelease:
        description: 'Publish new release'
        type: boolean
        default: false
        required: false
      tag:
        type: string
        description: 'Release version tag (e.g. v0.2.1-beta)'
        required: true
      ref:
        type: string
        description: 'Git ref from which to release'
        required: true
        default: 'main'

env:
  DOTNET_SDK_VERSION: "9.0.*"
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  set-date:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get_date.outputs.date }}
      tag: ${{ steps.format_tag.outputs.tag }}
    steps:
      - name: Get Date in UTC+8
        id: get_date
        run: |
          DATE=$(date -u -d '8 hours' +'%Y%m%d')
          echo "date=${DATE}" >> "$GITHUB_OUTPUT"

      - name: Determine Tag
        id: format_tag
        run: |
          if [ "${{ github.event.inputs.doRelease }}" == "true" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="actions-$GITHUB_RUN_ID"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

  
  build-linux-x64-arm64:
    runs-on: ubuntu-latest
    needs: set-date

    steps:
      - name: setup deb822 repos
        run: |
          if [[ $ImageOS == "ubuntu24" ]]; then
            cat <<EOF > deb822sources
          Types: deb
          URIs: http://archive.ubuntu.com/ubuntu/
          Suites: noble
          Components: main restricted universe
          Architectures: amd64

          Types: deb
          URIs: http://security.ubuntu.com/ubuntu/
          Suites: noble-security
          Components: main restricted universe
          Architectures: amd64

          Types: deb
          URIs: http://archive.ubuntu.com/ubuntu/
          Suites: noble-updates
          Components: main restricted universe
          Architectures: amd64

          Types: deb
          URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
          Suites: noble
          Components: main restricted multiverse universe
          Architectures: arm64

          Types: deb
          URIs: http://azure.ports.ubuntu.com/ubuntu-ports/
          Suites: noble-updates
          Components: main restricted multiverse universe
          Architectures: arm64
          EOF

            sudo mv deb822sources /etc/apt/sources.list.d/ubuntu.sources
          else
            sudo mv config/crosscomp-sources.list /etc/apt/sources.list
          fi
          
      # https://learn.microsoft.com/zh-cn/dotnet/core/deploying/native-aot/cross-compile
      - run: |
          sudo dpkg --add-architecture arm64
          sudo bash -c 'cat > /etc/apt/sources.list.d/arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
          EOF'
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo sed -i -e 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y curl wget libicu-dev libcurl4-openssl-dev zlib1g-dev libkrb5-dev clang llvm binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu zlib1g-dev:arm64
      
      - uses: actions/checkout@v1
      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      
      - run: dotnet publish src/N_m3u8DL-RE -r linux-x64 -c Release -o artifact
      - run: dotnet publish src/N_m3u8DL-RE -r linux-arm64 -c Release -o artifact-arm64

      - name: Package [linux]
        run: |
          cd artifact
          tar -czvf ../N_m3u8DL-RE_${{ needs.set-date.outputs.tag }}_linux-x64_${{ needs.set-date.outputs.date }}.tar.gz N_m3u8DL-RE
          cd ../artifact-arm64
          tar -czvf ../N_m3u8DL-RE_${{ needs.set-date.outputs.tag }}_linux-arm64_${{ needs.set-date.outputs.date }}.tar.gz N_m3u8DL-RE

      - name: Upload Artifact [linux-x64]
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: N_m3u8DL-RE_${{ needs.set-date.outputs.tag }}_linux-x64_${{ needs.set-date.outputs.date }}.tar.gz

      - name: Upload Artifact[linux-arm64]
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: N_m3u8DL-RE_${{ needs.set-date.outputs.tag }}_linux-arm64_${{ needs.set-date.outputs.date }}.tar.gz


  build-mac-x64-arm64:
    runs-on: macos-latest
    needs: set-date

    steps:
      - uses: actions/checkout@v1

      - name: Set up dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
      - run: dotnet publish src/N_m3u8DL-RE -r osx-arm64 -c Release -o artifact-arm64 
      - run: dotnet publish src/N_m3u8DL-RE -r osx-x64 -c Release -o artifact-x64 

      - name: Package [osx]
        run: |
          cd artifact-x64
          tar -czvf ../N_m3u8DL-RE_${{ needs.set-date.outputs.tag }}_osx-x64_${{ needs.set-date.outputs.date }}.tar.gz N_m3u8DL-RE
          cd ../artifact-arm64
          tar -czvf ../N_m3u8DL-RE_${{ needs.set-date.outputs.tag }}_osx-arm64_${{ needs.set-date.outputs.date }}.tar.gz N_m3u8DL-RE

      - name: Upload Artifact [osx-x64]
        uses: actions/upload-artifact@v4
        with:
          name: osx-x64
          path: N_m3u8DL-RE_${{ needs.set-date.outputs.tag }}_osx-x64_${{ needs.set-date.outputs.date }}.tar.gz

      - name: Upload Artifact[osx-arm64]
        uses: actions/upload-artifact@v4
        with:
          name: osx-arm64
          path: N_m3u8DL-RE_${{ needs.set-date.outputs.tag }}_osx-arm64_${{ needs.set-date.outputs.date }}.tar.gz

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: ${{ github.event.inputs.doRelease == 'true' }}
    needs: [set-date,build-linux-x64-arm64,build-mac-x64-arm64]
    
    steps:
      - name: Fetch artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.tag }}
          name: N_m3u8DL-RE_${{ github.event.inputs.tag }}
          artifacts: "android-bionic-x64/*,android-bionic-arm64/*,linux-x64/*,linux-arm64/*,linux-musl-x64/*,linux-musl-arm64/*,osx-x64/*,osx-arm64/*,win-x64/*,win-arm64/*,win-NT6.0-x86/*"
          draft: false
          allowUpdates: true
          generateReleaseNotes: true
          discussionCategory: 'Announcements'
